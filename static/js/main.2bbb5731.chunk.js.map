{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","cardcomponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","childern","Component","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oOAeeA,EAbF,SAACC,GACb,OAGC,yBAAKC,UAAY,uDACjB,yBAAKC,IAAK,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACtB,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCUEC,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACtC,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAII,EAAOI,GAAGR,GACdC,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,WAIpB,OACC,6BACWG,ICFEK,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACI,yBAAKf,UAAU,OACjB,2BACAA,UAAY,sCACZgB,KAAK,SACLC,YAAY,gBACZC,SAAWH,MCACI,EAPD,SAACpB,GACd,OACC,yBAAKqB,MAAO,CAAEC,UAAW,SAAUC,OAAO,kBAAkBC,OAAO,UAClExB,EAAMyB,WCeMC,E,kDAjBd,WAAY1B,GAAO,IAAD,8BACjB,cAAMA,IACD2B,MAAQ,CACZC,UAAU,GAHM,E,8DAMAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAGG,KAAKJ,MAAMC,SACN,yDAEDG,KAAK/B,MAAMiC,a,GAdOC,aC4EZC,G,wDArDd,aAAe,IAAD,8BACb,gBAiBEC,eAAiB,SAACC,GAEjB,EAAKL,SAAS,CAAEjB,YAAasB,EAAMC,OAAOC,SAlB7C,EAAKZ,MAAQ,CACbnB,OAAQ,GACRO,YAAa,IAETyB,QAAQC,IAAI,KANH,E,gEAQO,IAAD,OAEjBC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKd,SAAS,CAACxB,OAAQsC,OAGxCN,QAAQC,IAAI,O,+BAaF,IAAD,EAC0BV,KAAKJ,MAA7BnB,EADF,EACEA,OAAQO,EADV,EACUA,YACZgC,EAAiBvC,EAAOwC,QAAO,SAAAxC,GACnC,OAAOA,EAAOH,KAAK4C,cAAcC,SAASnC,EAAYkC,kBAGtD,OADAT,QAAQC,IAAI,KACS,IAAlBjC,EAAO2C,OAEC,wCAIN,yBAAKlD,UAAY,MACjB,wBAAIA,UAAY,MAAhB,eACH,kBAAC,EAAD,CAAYe,aAAce,KAAKK,iBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU5B,OAAQuC,W,GA9CZb,cCZEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACN,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLW,QAAQX,MAAMA,EAAMsC,a","file":"static/js/main.2bbb5731.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\treturn(\n\t\t// const { name, email, id} = props; \n\t\t// <h1>RoboFriends</h1>\n\t\t<div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t<img alt ='robots' src={`https://robohash.org/${props.id}?200x200`} />\n\t\t<div>\n\t\t\t<h2>{props.name}</h2>\n\t\t\t<p>{props.email}</p>\n\t\t</div>\n\t\t</div>\n\t\t);\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\tconst cardcomponent = robots.map((user,i) => {\n\t\treturn  (\n\t\t\t<Card \n\t\t\t\tkey={i} \n\t\t\t\tid={robots[i].id} \n\t\t\t\tname={robots[i].name} \n\t\t\t\temail={robots[i].email}\n\t\t\t/>\n\t\t);\n\t})\n\treturn(\n\t\t<div>\n            {cardcomponent}\n        </div>\n\t\t);\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n\treturn(\n     <div className='pa2'>\n   <input \n   className = 'tc bg-lightest-blue ba b--green pa3' \n   type='search' \n   placeholder='search robots'\n   onChange={ searchChange }/>\n     </div>\n\t\t);\n\t\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll =(props) => {\n\treturn(\n\t\t<div style={{ overflowY: 'scroll', border:'5px solid black',height:'800px'}}>\n\t\t{props.children}\n\t\t</div>\n\t\t);\n};\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError: true })\n\t}\n\trender() {\n\t\tif(this.state.hasError) {\n\t\t\treturn <h1>Ooooops. That is not good</h1>\n\t\t}\n\t\treturn this.props.childern\n\t}\n}\n\nexport default ErrorBoundry;","// import React from 'react';\nimport React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n// import {robots} from './robots';\nimport './App.css'\n\n\n// const state = {\n// \trobots: robots,\n// \tsearchfield: ''\n// }\n\n// const App = () => {\n// \treturn(\n//      <div className = 'tc'>\n//      <h1>RoboFriends</h1>\n// \t\t<SearchBox />\n// \t\t<CardList robots= {robots}/>\n//      </div>\n// \t\t);\t\n// }\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\trobots: [],\n\t\tsearchfield: ''\n      }\t\n      console.log('1');\n\t}\n  componentDidMount(){\n    // console.log('check');\n    fetch('https://jsonplaceholder.typicode.com/users') \n     .then(response => response.json())\n     .then(users => this.setState({robots: users}));\n      // .then(users => {});\n  \n   console.log('2');\n  }\n\t// onSearchChange is a random function which we have created\n    onSearchChange = (event) => {\n    \t// setState this is the method which come with react\n    \tthis.setState({ searchfield: event.target.value })\n    \t// const filteredRobots = this.state.robots.filter(robots => {\n    \t// \treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    \t// })\n    \t// console.log(event.target.value);\n    \t// console.log(filteredRobots);\n    }\n\n  \trender() {\n      const { robots, searchfield } = this.state;\n  \t\tconst filteredRobots = robots.filter(robots =>{\n    \t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase());\n    \t})\n      console.log('3');\n      if(robots.length === 0)\n      {\n          return <h1> Loading</h1>\n      }\n      else{\n      \treturn(\n           <div className = 'tc'>\n           <h1 className = 'f1'>RoboFriends</h1>\n      \t\t<SearchBox  searchChange={this.onSearchChange}/>\n      \t\t<Scroll>\n            <ErrorBoundry>\n      \t\t    <CardList robots={filteredRobots}/>\n            </ErrorBoundry>\n          </Scroll>\n           </div>\n      \t\t);\t\n      }\n   }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n   <App />,\n   document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}